import Nav from "../../Components/Cart/Nav";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import {
  Box,
  Button,
  Card,
  Heading,
  HStack,
  Image,
  Stack,
  Text,
  VStack,
} from "@chakra-ui/react";
import Cards from "../../Components/Cart/Cards";
// import { data1 } from 'Components/Cart/cart.data.js'
import Coupan from "../../Components/Cart/Coupan";
import OrderSummary from "../../Components/Cart/OrderSummary";
import Footer from "../../Components/Cart/Footer";
import { useDispatch, useSelector } from "react-redux"; //getCard
import { getCard, userPrice, userMaxprice } from "../../redux/card/card.action";
import axios from "axios";
import { useRouter } from "next/router";
import Carditem from "@/Components/Cart/Carditem";
import { AddIcon, MinusIcon } from "@chakra-ui/icons";
import Link from "next/link";


let count = 0;
export default function Cart() {
  const [cartLength, setCartLength] = useState([]);
  const [maxprice, setMaxprice] = useState(0);
  const [totalprice, setTotalprice] = useState(0);
  const [cartOutput, setOutput] = useState([]);
  const [cartItem, setcartItem] = useState([])
  const [ quantity, setQuantity] = useState(1);
  const router = useRouter();

  const handlePage = () => {
    router.push(`/checkout`);
  };

  // redux
  const [user_id, setId] = useState(0);

  const { data, totalPrice, totalMaxprice, datas } = useSelector(
    (store) => store.card
  );
 
  const dispatch = useDispatch();
  // const patchCardapi = (user_id, arr) => {
  //   return axios.patch(`http://localhost:8080/User-Details/${user_id}`, {
  //     Orders: arr,
  //   });
  // };

  const handlepatch =  (user_id, arr) => {
    try {
      axios.patch(`http://localhost:8080/User-Details/${user_id}`, {
      Orders: arr,
    })
    .then(res => {
      // res.data
      console.log(res.data);
    })
    
      // let res = await patchCardapi(user_id, arr);
    } catch (err) {
      console.log(err);
    }
  };

  const handlequantity = (id, val, user_id) => {
    let arr = data.Orders?.map((el) => {
      if (el.id == id) {
        el.quantity += val;
      }
      // console.log(val);
      return el;
    });

    // setSession(arr)
    handlepatch(user_id, arr);
    console.log(arr);
    dispatch(getCard(user_id))
    handleTotalprice();
    handleMaxprice();
  };

  const handleTotalprice = () => {
    let ans = 0;
    data.Orders?.map((el) =>
      el.cart == true ? (ans += el.product_price * el.quantity) : 0
    );

    // cart length

    setTotalprice(ans);
    dispatch(userPrice(ans));
    console.log("totalprice",totalprice);
  };

  const handleMaxprice = () => {
    let ans = 0;
    data.Orders?.map((el) => {
      return el.cart === true
        ? (ans += el.product_minimum_offer_price * el.quantity)
        : 0;
    });

    setMaxprice(ans);
    dispatch(userMaxprice(maxprice));
  };

   const handleDelete = (id) => {
    const userId = sessionStorage.getItem("LoggedUser_id") || "";
    axios.get(`http://localhost:8080/User-Details/${userId}`)
    .then(res=>{
      let data = res.data.Orders
      //setcartItem(data)
      let  a = data.filter((e)=>e.id!==id)
      setcartItem(a) 

      return fetch(`http://localhost:8080/User-Details/${userId}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ Orders: a }),
    }).then((res) => {
      res.json();
    });
    })
    
    
    
  }; 

  const getCartItems = () => {
    const userId = sessionStorage.getItem("LoggedUser_id") || "";
    axios.get(`http://localhost:8080/User-Details/${userId}`)
    .then(res=>{
      let data = res.data.Orders
      setcartItem(data) //changed
      console.log(data.length)
      //return data
    })
    
  }

  useEffect(() => {
    getCartItems()
    setId(sessionStorage.getItem("LoggedUser_id") || "");
  }, [quantity]);

  return (
    <div>
      <Head>
        <title>Cart</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/images/logo.png" />
      </Head>

      <main>
        <Nav />
         (
          <>
            <Box border={"0px"} p="20px" bg="#F4F4F4" mt={20}>
              <Stack
                direction={{ base: "column", lg: "row" }}
                m="auto"
                border={"0px"}
              >
                <Box
                  boxShadow="md"
                  p="9px"
                  rounded="md"
                  bg="white"
                  m="auto"
                  w={{ base: "100%", lg: "60%" }}
                >
                  <Heading size="md" p="10px">
                    Shopping Cart
                  </Heading>
                  <Box p="0px" border={"0px"}>
                    {
                      cartItem.map((data)=>(
                        <Card
                            direction={{ base: "column", sm: "row" }}
                            p="20px"
                            gap={"30px"}
                            key={Date.now()}
                          >
                            <Box w="25%" m="auto">
                              <Image
                                objectFit="cover"
                                w="100%"
                                src={data.product_photo}
                                alt="Caffe Latte"
                              />
                            </Box>

                            <Stack w="99%" m="auto">
                              <VStack border="0px" alignItems={"left"}>
                                <Heading size="md">{data.category}</Heading>

                                <Text py="2">{data.product_title}</Text>

                                <Text>${data.product_price * data.quantity}</Text>
                              </VStack>

                              <Stack
                                border="0px"
                                direction={{ base: "column", sm: "row" }}
                                p="5px"
                                justifyContent={"space-between"}
                                alignItems={"center"}
                              >
                                <Box border="0px">
                                  <Button
                                    size="sm"
                                    colorScheme={"teal"}
                                    variant="outline"
                                    isDisabled={data.quantity == 1}
                                    onClick={() => {
                                      handlequantity(data.id, -1, user_id);
                                      setQuantity(quantity-1);
                                    }}
                                  >
                                    <MinusIcon />
                                  </Button>
                                  <Button m="10px" size="sm">
                                    {data.quantity}
                                  </Button>
                                  <Button
                                    size="sm"
                                    colorScheme={"teal"}
                                    variant="outline"
                                    isDisabled={data.quantity == 5}
                                    onClick={() => {
                                      handlequantity(data.id, 1, user_id);
                                      setQuantity(quantity+1);
                                    }}
                                  >
                                    <AddIcon />
                                  </Button>
                                </Box>
                                <Box>
                                  <Button
                                    variant="solid"
                                    size="sm"
                                    p="20px"
                                    colorScheme="red"
                                    onClick={() => {
                                      handleDelete(data.id, user_id);
                                    }}
                                  >
                                    Remove
                                  </Button>
                                </Box>
                              </Stack>
                            </Stack>
                          </Card>
                      ))
                    }
                  </Box>
                </Box>

                <Box m="auto" w={{ base: "100%", lg: "40%" }}>
                  <Box p="5px" boxShadow="sm" rounded="md" bg="white">
                    <Coupan />
                  </Box>
                  <Box p="5px" boxShadow="sm" rounded="md" bg="white" mt="10px">
                    <Box p="5px">
                      <Heading size="md">Order Summary</Heading>
                    </Box>
                    <Box p="5px">
                      <OrderSummary
                        maxprice={totalMaxprice}
                        totalprice={totalPrice}
                      />
                    </Box>
                    
                      <Box pt="25px">
                      <Link href={"/checkout"}>
                        <Button
                          w="100%"
                          // onClick={() => {
                          //   handlerouter();
                          // }}
                          onClick={() => handlePage()}
                          bg={"teal.400"}
                          color={"white"}
                          _hover={{ bg: "teal" }}
                        >
                          Proceed to Pay ${parseFloat(totalprice - 2).toFixed(2)}
                        </Button>
                        </Link>
                      </Box>
                    
                    
                  </Box>
                </Box>
              </Stack>
            </Box>
            <Footer />
          </>
        ) 
      </main>
    </div>
  );
}
